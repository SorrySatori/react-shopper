{"version":3,"sources":["nav.js","Item.js","ItemPage.js","CartPage.js","static-data.js","App.js","index.js","registerServiceWorker.js"],"names":["Nav","activeTab","onTabChange","className","onClick","Item","item","children","name","description","price","ItemPage","items","onAddToCart","map","key","id","CartPage","onAddOne","onRemoveOne","count","App","state","cart","handleTabChange","index","setState","handleAddToCart","handleRemoveOne","indexOf","slice","this","renderCart","itemCounts","reduce","itemId","cartItems","Object","keys","find","parseInt","renderContent","React","Component","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.d349a9fd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Nav = ({ activeTab, onTabChange }) => (\n  <nav className=\"App-nav\">\n    <ul>\n      <li className={`App-nav-item ${activeTab === 0 && 'selected'}`}>\n        <a onClick={() => onTabChange(0)}>Items</a>\n      </li>\n      <li className={`App-nav-item ${activeTab === 1 && 'selected'}`}>\n        <a onClick={() => onTabChange(1)}>Cart</a>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Item.css';\n\nconst Item = ({ item, children }) => (\n  <div className=\"Item\">\n    <div className=\"Item-left\">\n      <div className=\"Item-image\" />\n      <div className=\"Item-title\">{item.name}</div>\n      <div className=\"Item-description\">{item.description}</div>\n    </div>\n    <div className=\"Item-right\">\n      <div className=\"Item-price\">${item.price}</div>\n      {children}\n    </div>\n  </div>\n);\nItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  children: PropTypes.node\n};\n\nexport default Item;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Item from './Item';\nimport './ItemPage.css';\n\nfunction ItemPage({ items, onAddToCart }) {\n  return (\n    <ul className=\"ItemPage-items\">\n      {items.map(item =>\n        <li key={item.id} className=\"ItemPage-item\">\n          <Item item={item}>\n            <button\n              className=\"Item-addToCart\"\n              onClick={() => onAddToCart(item)}>\n              Add to Cart\n            </button>\n          </Item>\n        </li>\n      )}\n    </ul>\n  );\n}\nItemPage.propTypes = {\n  items: PropTypes.array.isRequired,\n  onAddToCart: PropTypes.func.isRequired\n};\n\nexport default ItemPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Item from './Item';\nimport './CartPage.css';\n\nfunction CartPage({ items, onAddOne, onRemoveOne }) {\n  return (\n    <ul className=\"CartPage-items\">\n      {items.map(item =>\n        <li key={item.id} className=\"CartPage-item\">\n          <Item item={item}>\n            <div className=\"CartItem-controls\">\n              <button\n                className=\"CartItem-removeOne\"\n                onClick={() => onRemoveOne(item)}>&ndash;</button>\n              <span className=\"CartItem-count\">{item.count}</span>\n              <button\n                className=\"CartItem-addOne\"\n                onClick={() => onAddOne(item)}>+</button>\n            </div>\n          </Item>\n        </li>\n      )}\n    </ul>\n  );\n}\nCartPage.propTypes = {\n  items: PropTypes.array.isRequired,\n  onAddOne: PropTypes.func.isRequired,\n  onRemoveOne: PropTypes.func.isRequired\n};\n\nexport default CartPage;\n\n","let items = [\n  {\n    id: 0,\n    name: \"Apple iPad Mini 2 16GB\",\n    description: \"An iPad like no other. 16GB, WiFi, 4G.\",\n    price: 229.00\n  },\n  {\n    id: 1,\n    name: \"Apple iPad Mini 2 32GB\",\n    description: \"Even larger than the 16GB.\",\n    price: 279.00\n  },\n  {\n    id: 2,\n    name: \"Canon T7i\",\n    description: \"DSLR camera with lots of megapixels.\",\n    price: 749.99\n  },\n  {\n    id: 3,\n    name: \"Apple Watch Sport\",\n    description: \"A watch\",\n    price: 249.99\n  },\n  {\n    id: 4,\n    name: \"Apple Watch Silver\",\n    description: \"A more expensive watch\",\n    price: 599.99\n  }\n];\n\nexport {items};\n\n","import React from 'react';\nimport Nav from './nav';\nimport ItemPage from './ItemPage';\nimport CartPage from './CartPage';\nimport {items} from './static-data';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    activeTab: 0,\n\t\tcart: []\n  };\n\n  handleTabChange = (index) => {\n    this.setState({\n      activeTab: index\n    });\n  }\n\n  handleAddToCart = (item) => {\n    this.setState({\n      cart: [...this.state.cart, item.id]\n    });\n  }\n\n  handleRemoveOne = (item) => {\n    let index = this.state.cart.indexOf(item.id);\n    this.setState({\n      cart: [\n        ...this.state.cart.slice(0, index),\n        ...this.state.cart.slice(index + 1)\n      ]\n    });\n  }\n\n  renderContent() {\n    switch(this.state.activeTab) {\n      default:\n      case 0:\n        return (\n          <ItemPage\n            items={items}\n            onAddToCart={this.handleAddToCart} />\n        );\n      case 1:\n        return this.renderCart();\n    }\n  }\n\n  renderCart() {\n    // Count how many of each item is in the cart\n    let itemCounts = this.state.cart.reduce((itemCounts, itemId) => {\n      itemCounts[itemId] = itemCounts[itemId] || 0;\n      itemCounts[itemId]++;\n      return itemCounts;\n    }, {});\n\n    // Create an array of items\n    let cartItems = Object.keys(itemCounts).map(itemId => {\n      // Find the item by its id\n      var item = items.find(item =>\n        item.id === parseInt(itemId, 10)\n      );\n\n      // Create a new \"item\" that also has a 'count' property\n      return {\n        ...item,\n        count: itemCounts[itemId]\n      }\n    });\n\n\t\treturn (\n\t\t\t<CartPage\n\t\t\t\titems={cartItems}\n\t\t\t\tonAddOne={this.handleAddToCart}\n\t\t\t\tonRemoveOne={this.handleRemoveOne} />\n\t\t);\n  }\n\n  render() {\n    let {activeTab} = this.state;\n    return (\n      <div className=\"App\">\n        <Nav activeTab={activeTab} onTabChange={this.handleTabChange} />\n        <main className=\"App-content\">\n          {this.renderContent()}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}